#!/usr/bin/python
import subprocess
from datetime import datetime, date
import os
from os.path import join, isfile, isdir, getctime, basename
import time
import sys

from selenium import webdriver
from selenium.webdriver.firefox.options import Options, Log
import youtube_dl

URL = "https://www.ardmediathek.de/ard/sendung/sandmann/Y3JpZDovL3JiYi1vbmxpbmUuZGUvc2FuZG1hbm4/"
ELEMENT_XPATH = './/div[@class="Root-sc-1bf56nn-0 iEEQOl"]'
TIME_XPATH = './/div[@class="Line-epbftj-1 ibukAJ"]'

PATH = join(os.environ['HOME'], 'usr', 'vids', 'sandmann')


def usage(program_name: str):
    print(f'Usage: {basename(program_name)} [l [num|name]] [c] [p yyyy-mm-dd] [story]')
    exit(1)


def err(msg: str):
    print(f'[!] {msg}')
    sys.exit(1)


def set_options():
    options = Options()
    log = Log()
    log.level = "TRACE"
    options.add_argument(log.level)
    options.headless = True

    return options


def browse():
    options = set_options()
    try:
        browser = webdriver.Firefox(
            options=options,
            service_log_path='/tmp/geckdriver_log.log')
        browser.get(URL)
        return browser
    except Exception:
        err('Error contacting URL')


def clean_date(date_str: str):
    return datetime.strptime(date_str[:10], '%d.%m.%Y').date()


def extract_information(field):
    link = field.find_element_by_xpath('.//a').get_attribute('href')
    title = [title for title in link.split('/') if 'unser-sandmaennchen' in title][0][24:]
    date = clean_date(field.find_element_by_xpath(TIME_XPATH).text)
    return (title, date, link)


def set_youtube_options(path_str: str):
    return {
        'outtmpl': f'{path_str}',
        'format': 'best'
    }


def download(options: dict, title: str, date: datetime.date, link: str):
    with youtube_dl.YoutubeDL(options) as ydl:
        try:
            ydl.download([link])
        except Exception:
            err(f'error downloading {date}-{title}')


def crawl():
    browser = browse()

    for (i, field) in enumerate(browser.find_elements_by_xpath(ELEMENT_XPATH)):
        title, date, link = extract_information(field)

        if ('mit-gebaerdensprache') in title:
            continue

        destination = f'{join(PATH, title, str(date))}.mp4'
        if not isfile(destination):
            options = set_youtube_options(destination)
            download(options, title, date, link)
        else:
            print(f'exists {date} {title}')

    time.sleep(0.1)
    browser.delete_all_cookies()
    browser.close()


def get_date_from_path(path: str):
    return date.fromisoformat(basename(path)[:-4])


def latest(paths: list):
    return max(paths, key=get_date_from_path)


def episodes(dir_path: str):
    return [join(dir_path, f) for f in os.listdir(dir_path) if isfile(join(dir_path, f)) and f.endswith('.mp4')]


def stories(name: str = ''):
    return [story for story in os.listdir(PATH) if isdir(join(PATH, story)) and name in story]


def all_files():
    return [f for d in map(lambda s: join(PATH, s), stories()) for f in episodes(d)]


def play(path: str):
    if not path or not isfile(path) or not path.endswith('.mp4'):
        err(f'error playing path')
    print(f'playing {path}')
    result = subprocess.Popen(['mpv', '--no-terminal', path])


def identify_story(user_input: str):
    s = stories(user_input)
    if len(s) == 1:
        path = join(PATH, s[0])
        return path
    elif len(s) > 1:
        err('be more specific')
    else:
        err('not included')


def validate_date_str(user_input: str):
    try:
        date.fromisoformat(user_input)
    except:
        err('no yyyy-mm-dd given')
    return user_input


def find(user_input: str):
    f = [f for f in all_files() if user_input in f]
    if not f:
        err('no file found')
    return f[0]


def convert_list_arg(user_input: str):
    try:
        user_input = int(user_input)
    except Exception:
        pass
    return user_input


def show(l: list):
    print('\n'.join(l))


if __name__ == '__main__':
    if len(sys.argv) < 2:
        play(latest(all_files()))
        sys.exit()

    if sys.argv[1] == 'h':
        usage(sys.argv[0])
    elif sys.argv[1] == 'c':
        crawl()
    elif sys.argv[1] == 'l':
        if sys.argv[2:]:
            value = convert_list_arg(sys.argv[2])
            if type(value) is str:
                show(episodes(identify_story(value)))
            elif type(value) is int:
                show(sorted(all_files(), key=get_date_from_path)[-value:])
        else:
            show(stories())
    elif sys.argv[1] == 'p':
        if len(sys.argv) <= 2:
            usage(sys.argv[0])
        play(find(validate_date_str(sys.argv[2])))
    else:
        play(latest(episodes(identify_story(sys.argv[1]))))

