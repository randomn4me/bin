#!/usr/bin/python
import subprocess
from datetime import datetime, date
import os
from os.path import join, isfile, isdir, getctime, basename
import time
import sys

from selenium import webdriver
from selenium.webdriver.firefox.options import Options, Log
import youtube_dl

URL = "https://www.ardmediathek.de/ard/sendung/sandmann/Y3JpZDovL3JiYi1vbmxpbmUuZGUvc2FuZG1hbm4/"
VIDEO_XPATH = './/div[@class="Root-sc-1qgar2i-1 bXqHdK"]'
TIME_XPATH = './/div[@class="Line-sc-1qgar2i-10 Subline-sc-1qgar2i-13 dzWKQz"]'

PATH = join(os.environ['HOME'], 'usr', 'vids', 'sandmann')


def usage(program_name: str):
    print(f'Usage: {program_name} [episodename]')
    exit(1)


def err(msg: str):
    print(f'[!] {msg}')
    exit(1)


def set_options():
    options = Options()
    log = Log()
    log.level = "TRACE"
    options.add_argument(log.level)
    options.headless = True

    return options


def browse():
    options = set_options()
    try:
        browser = webdriver.Firefox(
            options=options,
            service_log_path='/tmp/geckdriver_log.log')
        browser.get(URL)
        return browser
    except Exception:
        err('Error contacting URL')


def clean_title(title: str):
    return '-'.join(title.split()[3:-1]).lower()


def clean_date(date_str: str):
    return datetime.strptime(date_str[:10], '%d.%m.%Y').date()


def extract_information(field):
    title = clean_title(field.get_attribute('title'))
    date = clean_date(field.find_elements_by_xpath(TIME_XPATH)[0].text)
    link = field.find_elements_by_xpath('.//a')[0].get_attribute('href')
    return (title, date, link)


def set_youtube_options(path_str: str):
    return {
        'outtmpl': f'{path_str}',
        'format': 'best'
    }


def download(options: dict, title: str, date: datetime.date, link: str):
    with youtube_dl.YoutubeDL(options) as ydl:
        try:
            ydl.download([link])
        except Exception:
            print(f'error downloading {date}-{title}')


def exists(path: str):
    return isfile(path)


def crawl():
    browser = browse()

    for (i, field) in enumerate(browser.find_elements_by_xpath(VIDEO_XPATH)):
        title, date, link = extract_information(field)

        if ('gebÃ¤rdensprache') in title:
            continue

        destination = f'{join(PATH, title, str(date))}.mp4'
        if not exists(destination):
            options = set_youtube_options(destination)
            download(options, title, date, link)
        else:
            print(f'exists {date} {title}')

    time.sleep(0.1)
    browser.delete_all_cookies()
    browser.close()


def get_date_from_path(path: str):
    return date.fromisoformat(basename(path)[:-4])


def latest_file(paths: list):
    return max(paths, key=get_date_from_path)


def get_files():
    dirs = [file for file in os.listdir(PATH) if isdir(join(PATH, file))]
    return [join(PATH, dir, file) for dir in dirs for file in os.listdir(join(PATH, dir)) if isfile(join(PATH, dir, file)) and file.endswith('.mp4')]

def play_path(path: str):
    result = subprocess.Popen(['mpv', '--no-terminal', path])


def play_episode(episode_name: str):
    dirs = [file for file in os.listdir(PATH) if isdir(join(PATH, file)) and episode_name in file]
    if len(dirs) == 1:
        path = join(PATH, dirs[0])
        file_paths = [join(path, file) for file in os.listdir(path)]
        play_path(latest_file(file_paths))
    elif len(dirs) > 1:
        print('\n'.join(dirs))
        err('be more specific')
    else:
        print(dirs)
        err('pick one')


def play_latest():
    files = get_files()
    play_path(latest_file(files))


if __name__ == '__main__':
    if len(sys.argv) < 2:
        play_latest()
    elif sys.argv[1] == 'h':
        usage(sys.argv[0])
    elif sys.argv[1] == 'c':
        crawl()
    else:
        play_episode(sys.argv[1])

